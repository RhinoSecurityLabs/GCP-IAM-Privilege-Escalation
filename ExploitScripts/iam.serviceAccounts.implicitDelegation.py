#!/usr/bin/env python3

import sys
import subprocess
import requests
import json
import argparse

def get_access_token():
    """Retrieve the current access token using the Google Cloud SDK."""
    try:
        return subprocess.check_output(['gcloud', 'auth', 'print-access-token']).decode().strip()
    except subprocess.CalledProcessError as e:
        print("Failed to fetch access token: ", e)
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description='Generate an access token for a target service account using a delegated service account.')
    parser.add_argument('delegated_service_account', type=str, help='Email of the service account you have implicitDelegation on')
    parser.add_argument('target_service_account', type=str, help='Email of the target service account that the previous account can create access tokens on')
    
    args = parser.parse_args()
    access_token = get_access_token()  # Retrieve the access token

    try:
        # Making the request to generate an access token
        response = requests.post(
            f'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/{args.target_service_account}:generateAccessToken',
            headers={
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {access_token}'
            },
            json={
                'delegates': [f'projects/-/serviceAccounts/{args.delegated_service_account}'],
                'scope': ['https://www.googleapis.com/auth/cloud-platform']
            }
        )
        response.raise_for_status()  # Raises an HTTPError for bad responses
        key = response.json()
        print(json.dumps(key, indent=4))
    except requests.exceptions.RequestException as e:
        # Handling exceptions from the request
        print(f'Error during request: {e}')

if __name__ == '__main__':
    main()
